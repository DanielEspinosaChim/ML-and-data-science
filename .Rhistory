View(iris)
library(ggplot2)
ggplot(data=iris)+geom_histogram(aes(x=Sepal.Width))
ggplot(data=iris, aes(x=Species, y=Sepal.Width,fill=Species))+geom_boxplot(notch=TRUE)+stat_summary(fun.y=mean, geom="point", fill="white", shape=21,size=2.5)+ylab("Sepal.Width")
ggplot(data=iris, aes(x=Species,y=Sepal.Width))+geom_boxplot()+ylab("Sepal.Width")
ggplot(data=iris, aes(x=Species,y=Sepal.Width))+geom_violin()+ylab("Sepal Width")
#5 variables:
ggplot(data=iris)+geom_point(aes(x=Sepal.Width,y=Sepal.Length, colour=Petal.Width, size= Petal.Length))+facet_wrap(~Species)
install.packages("GGally")
#2 variables:
ggplot(data=iris)+geom_point(aes(x=Sepal.Width,y=Sepal.Length))
library(GGally)
#3 variables:
ggplot(data=iris)+geom_point(aes(x=Sepal.Width,y=Sepal.Length, colour=Species))
install.packages("alluvial")
library(alluvial)
#4 Variables:
ggplot(data=iris)+geom_point(aes(x=Sepal.Width,y=Sepal.Length, colour=Species, size= Petal.Length))
ventas<-c(23,51,43,76,95,23)
mes<-c(1,2,3,4,5,6)
plot(ventas)
plot(ventas, mes)
plot(ventas,mes,type="p",col="red")
plot(ventas,mes,type= "l",col="red")
pie(ventas)
pie(ventas,col="rainbow"(length(ventas)),labels=c("A","B","C","D","E"
,"F"))
barplot(ventas)
barplot(ventas,mes)
barplot(ventas, mes,xlab="ventas", ylab=mes,border="blue")
hist(ventas)
hist(mes)
View(economics)
ggplot(data=economics)+geom_point(aes(x=date,y=unemploy))
myplot<-ggplot(data=economics) +geom_point(aes(x=date,y=unemploy))
myplot
ggplot(data=economics)+geom_point(aes(x=date,y=unemploy),size=0.5)
ggplot(data=economics)+geom_point(aes(x=date,y=unemploy),size=
2.5)
ggplot(data=economics)+geom_point(aes(x=date,y=unemploy),size=
2.5)+geom_line(aes(x=date,y=unemploy))
View(iris)
ggplot(data=iris)+geom_histogram(aes(x=Sepal.Width))
ggplot(data=iris)+geom_histogram(aes(x=Sepal.Width),bins = 10 )
ggplot(data=iris)+geom_histogram(aes(x=Sepal.Width),bins = 10,
binwidth = 0.5, fill="blue", colour="black" )
ggplot(data=iris)+geom_histogram(aes(x=Sepal.Width),bins = 10,
binwidth = 0.5, fill="blue", colour="black" )+xlab("Sepal
Width")+ylab("Count")
ggplot(data=iris,aes(x=Sepal.Width))+geom_density()+theme_bw()
ggplot(data=iris,aes(x=Sepal.Width))+geom_density()+theme_classic()
ggplot(data=iris,aes(x=Sepal.Width))+geom_density()+theme_dark()
ggplot(data=iris,aes(x=Sepal.Width,fill=Species))+geom_density(alpha=0.3)+theme_bw()+xlab("Sepal Width")+ylab("Density")
ggplot(data=iris,aes(x=Sepal.Width,fill=Species))+geom_density(alpha=0.1)+theme_bw()+facet_grid("Species")
ggplot(data=iris,aes(x=Sepal.Width,fill=Species))+geom_density(alpha=0.1)+theme_bw()+facet_wrap("Species")
ggplot(data=iris,aes(x=Sepal.Width,fill=Species))+geom_density(alpha=0.1)+theme_bw()+facet_wrap("Species")
ggplot(data=iris, aes(x=Species,y=Sepal.Width))+geom_boxplot()+ylab("Sepal.Width")
ggplot(data=iris, aes(x=Species, y=Sepal.Width,fill=Species))+geom_boxplot(notch=TRUE)+stat_summary(fun.y=mean, geom="point", fill="white", shape=21,size=2.5)+ylab("Sepal.Width")
#2 variables:
ggplot(data=iris)+geom_point(aes(x=Sepal.Width,y=Sepal.Length))
#3 variables:
ggplot(data=iris)+geom_point(aes(x=Sepal.Width,y=Sepal.Length, colour=Species))
#4 Variables:
ggplot(data=iris)+geom_point(aes(x=Sepal.Width,y=Sepal.Length, colour=Species, size= Petal.Length))
#5 variables:
ggplot(data=iris)+geom_point(aes(x=Sepal.Width,y=Sepal.Length, colour=Petal.Width, size= Petal.Length))+facet_wrap(~Species)
ggpairs(data=iris, mapping=ggplot2::aes(colours=Species))
gpairs(data=iris, upper=list(continuous="points", combo = "dot"),mapping=ggplot2::aes(colour=Species, alpha= 0.5))+ theme_bw()
library(GGally)
ggpairs(data=iris, mapping=ggplot2::aes(colours=Species))
gpairs(data=iris, upper=list(continuous="points", combo = "dot"),mapping=ggplot2::aes(colour=Species, alpha= 0.5))+ theme_bw()
ggpairs(data=iris, mapping=ggplot2::aes(colours=Species))
ggpairs(data=iris, upper=list(continuous="points", combo = "dot"),mapping=ggplot2::aes(colour=Species, alpha= 0.5))+ theme_bw()
setwd("D:/PruebasMLUd")
# importar el dataset
df <- read.csv('D:/PruebasMLUd/Data.csv')
# tratamiento de los valores desconocidos
df$Age <- ifelse(is.na(df$Age), ave(df$Age, FUN = function(x) mean(x, na.rm = TRUE)), df$Age)
df$Salary <- ifelse(is.na(df$Salary), ave(df$Salary, FUN = function(x) mean(x, na.rm = TRUE)), df$Salary)
# para acceder a posiciones en R es con el signo de moneda $
# el ifelse aqui se hace mediante tres separaciones por comas de lo que este entre los parentesis (,,)
# donde la primera seccion es la condicion, la seccion del medio es lo que se hara en este caso del if y el lado izquierdo es el else
# el is.na(df$Salary) evalua si hay nan en esa columna
# ave genera un subconjunto de los valores de x y promediarlos
# ave(df$Salary, FUN = function(x) mean(x, na.rm = TRUE)) esto sirve para remplazar todos los valores de la columna seleccionada
# que esten en nan por la media de los valores del subconjunto sin contar los nans
# la ultima condicion indica que si no hay na mantenga el valor que tenia antes
# codificar las variables categoricas
df$Country <- factor(df$Country, levels = c("France", "Spain", "Germany"), labels = c(1, 2, 3))
# basicamente en R lo haces a mano, levels es que de el df en la columna que seleccionaste tiene que mapear con el numero que le pases en esa posicion
df$Purchased <- factor(df$Purchased, levels = c("No", "Yes"), labels = c(0, 1))
# dividir los datos en conjunto de entrenamiento y test
# install.packages("caTools")  asi se instalan paquetes o librerias en R
library(caTools) # asi cargas la libreria por codigo
set.seed(42)
split <- sample.split(df$Purchased, SplitRatio = 0.8)
training_set <- subset(df, split == TRUE)
testing_set <- subset(df, split == FALSE)
